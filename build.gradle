/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.0/userguide/java_library_plugin.html
 */
buildscript {
    ext {
        lombokVersion      = '1.18.8'
        junitVersion       = '5.5.2'
        hamcrestVersion    = '2.2'
        serenityVersion    = '2.0.83'
        checkstyleVersion  = '8.26'
    }

    repositories {
        mavenLocal()
        jcenter()
    }

    dependencies {
        classpath("net.serenity-bdd:serenity-gradle-plugin:${serenityVersion}")
    }
}



plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'jacoco'
    id 'checkstyle'
    id 'project-report'
    id 'build-dashboard'
    // id 'net.serenity-bdd.aggregator' version "${serenityVersion}"
    id "net.nemerosa.versioning" version "2.9.0"
}

// apply plugin: 'checkstyle'
// apply plugin: 'jacoco'
apply plugin: 'net.serenity-bdd.aggregator'


repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}


group          = 'com.airline'
// version = '0.0.1-SNAPSHOT'
version = versioning.info.full


sourceCompatibility = 1.8
targetCompatibility = 1.8

// ### Build the deliverable jar ###
task fatJar(type: Jar) {
    manifest {
        // attributes 'Implementation-Title': 'Airport Core Entities',
                //    'Implementation-Version': version
        attributes (
            'Built-By'       : System.properties['user.name'],
            'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
            'Build-Revision' : versioning.info.commit,
            'Build-Version'  : versioning.info.display,
            'Created-By'     : "Gradle ${gradle.gradleVersion}",
            'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
            'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
        )
    }
    archiveBaseName = project.name + '-all'
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }}
    with jar
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:28.0-jre'

    // Use JUnit Jupiter API for testing.
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")

    // https://mvnrepository.com/artifact/org.hamcrest/hamcrest
    testImplementation("org.hamcrest:hamcrest:${hamcrestVersion}")


    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    testImplementation("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")

    testImplementation("net.serenity-bdd:serenity-core:${serenityVersion}" )
    testImplementation("net.serenity-bdd:serenity-junit:${serenityVersion}" )
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
}



// See this page for options https://reflectoring.io/jacoco/
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }

        rule {
            limit {
                counter = 'LINE'
                value   = 'COVEREDRATIO'
                minimum = 1.0
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}



checkstyle {
    // assign the latest checkstyle version explicitly
    // default version is very old, likes 5.9
    toolVersion = "${checkstyleVersion}"
    // checkstyle.xml copy from:
    // https://raw.githubusercontent.com/checkstyle/checkstyle/checkstyle-8.6/src/main/resources/google_checks.xml
    // the version should be as same as plugin version
    // configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
}
// task Checkstyle(type: Checkstyle) {
//     // source 'src/main/java'
//     include '**/*.java'
//     exclude '**/gen/**'
//     exclude '**/R.java'
//     exclude '**/BuildConfig.java'

//     // empty classpath
//     classpath = rootProject.files()
// }

checkstyleMain {
    source = 'src/main/java'
}
checkstyleTest {
    source = 'src/test/java'
}



