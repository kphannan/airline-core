/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.0/userguide/java_library_plugin.html
 */
buildscript {
    ext {
        // --- Languages / framworks
        lombokVersion              = '1.18.22'
        apacheLangVersion          = '3.12.0'
        hibernateValidatorVersion  = '7.0.2.Final'
        jacksonVersion             = '2.10.1'

        // --- Testing ---
        // --- unit testing
        junitVersion               = '5.8.2'
        hamcrestVersion            = '2.2'
        serenityVersion            = '2.0.83'
        cucumberReportsVersion     = '4.11.2'


        // ===== Quality checks =====
        // --- Coding practies (static analysis) ---
        // --- Coding style
        checkstyleVersion          = '9.0.1'
        // --- Common Coding flaws
        pmdVersion                 = '6.41.0'

        // --- Testing ---
        // Unit testing
        junitVersion               = '5.8.2'
        // --- Code coverage
        pitVersion                 = '1.7.3'

        // --- Documentation ---
        asciiDoctorVersion         = '1.5.6'
    }

    repositories {
        mavenLocal()
    }

    dependencies {
        classpath("net.serenity-bdd:serenity-gradle-plugin:${serenityVersion}")
        classpath 'be.jlr-home.gradle:plantumlPlugin:0.1.+'
     }
}


plugins {
    // --- Artifact
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'

    // --- annotation processors
    id "io.freefair.lombok" version "6.3.0"

    // --- Frameworks


    // ===== Quality Assurance =====
    // --- Static Analysis
    // --- PMD
    id 'pmd'
    // --- Style
    id 'checkstyle'
    // --- Coverage
    id 'jacoco'
    // --- Mutation testing
    id 'info.solidsoft.pitest' version '1.7.0'


    // ===== Configuration Management =====
    id "net.nemerosa.versioning" version "2.9.0"
    id "com.gorylenko.gradle-git-properties" version "2.3.2"
    id 'maven-publish'

    // ===== Documentation =====
    id 'org.asciidoctor.convert' version '1.5.6'

    id 'project-report'
    id 'build-dashboard'
    // id 'net.serenity-bdd.aggregator' version "${serenityVersion}"

}

// apply plugin: 'checkstyle'
// apply plugin: 'jacoco'
apply plugin: 'net.serenity-bdd.aggregator'
apply plugin: 'plantuml'

repositories {
    mavenLocal()
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}


group          = 'com.airline'
version = '0.0.1-SNAPSHOT'
// version = versioning.info.full


sourceCompatibility = '13'
targetCompatibility = "${sourceCompatibility}"

versioning {
    releases = ['release', 'master']
    // releaseMode = 'snapshot'
    releaseBuild = true		// own control, which build is really release, set to true in CI-server release job
    // releaseMode = 'snapshot'	// how to compute version on release-branches
    displayMode = 'snapshot'	// how to compute version on non-release-branches
    dirty = { t -> t }		// switch off dirty-suffix ( could be usefull for local development )
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

// ### Build the deliverable jar ###
task fatJar(type: Jar) {
    manifest {
        // attributes 'Implementation-Title': 'Airport Core Entities',
                //    'Implementation-Version': version
        attributes (
            'Built-By'       : System.properties['user.name'],
            'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
            'Build-Revision' : versioning.info.commit,
            'Build-Version'  : versioning.info.display,
            'Created-By'     : "Gradle ${gradle.gradleVersion}",
            'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
            'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
        )
    }
    archiveBaseName = project.name
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }}
    with jar
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:28.0-jre'

    implementation 'org.decimal4j:decimal4j:1.0.3'

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    implementation( "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}" )

    // Use JUnit Jupiter API for testing.
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")

    // https://mvnrepository.com/artifact/org.hamcrest/hamcrest
    testImplementation("org.hamcrest:hamcrest:${hamcrestVersion}")


    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    testImplementation("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")

    testImplementation("net.serenity-bdd:serenity-core:${serenityVersion}" )
    testImplementation("net.serenity-bdd:serenity-junit:${serenityVersion}" )

    testImplementation( "net.masterthought:cucumber-reporting:${cucumberReportsVersion}" )

    // https://mvnrepository.com/artifact/com.puppycrawl.tools/checkstyle
    implementation "com.puppycrawl.tools:checkstyle:${checkstyleVersion}"


    // --- Mutation testing
    testRuntimeOnly( 'org.pitest:pitest-junit5-plugin:0.15' )
}


compileJava {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}



// ===== Quality Assurance =====

// --- unit test
test {
    // Use junit platform for unit tests
    useJUnitPlatform()
}

check {
    dependsOn {
        jacocoTestCoverageVerification
    }
}

// ===== Static Code Analysis =====
// --- Coverage (Jacoco) ---
// See this page for options https://reflectoring.io/jacoco/
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }

        rule {
            limit {
                counter = 'LINE'
                value   = 'COVEREDRATIO'
                minimum = 0.75
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}


// ----- Checkstyle -----
checkstyle {
    toolVersion = "${checkstyleVersion}"
    // checkstyle.xml copy from:
    // https://raw.githubusercontent.com/checkstyle/checkstyle/checkstyle-8.6/src/main/resources/google_checks.xml
    // the version should be as same as plugin version
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
    // // source 'src/main/java'
    // include '**/*.java'
    // exclude '**/gen/**'
    // exclude '**/R.java'
    // exclude '**/BuildConfig.java'

    // // empty classpath
    // classpath = rootProject.files()

}

checkstyleMain {
    source = 'src/main/java'
}

checkstyleTest {
    source = 'src/test/java'
}


// ----- PMD -----
pmd {
    consoleOutput = false
    ignoreFailures = true       // Don't interrupt the build
    toolVersion = "${pmdVersion}"
    ruleSetFiles = files("${rootDir}/config/pmd/pmd.xml")
    ruleSets = []
}

// --- Mutation Tests
pitest {
    verbose = true
    testSourceSets = [sourceSets.test]
    mainSourceSets = [sourceSets.main]
    // targetClasses = ['com.example.security.*']  //by default "${project.group}.*"
    pitestVersion = "${pitVersion}" //not needed when a default PIT version should be used
    threads = 4
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    withHistory = false
    // mutators = ['DEFAULTS', 'STRONGER', 'ALL']
    mutators = ['DEFAULTS', 'STRONGER' ]
}



// ===== Documentation =====
asciidoctor {
	sourceDir 'src/main/asciidoc'
	attributes \
		'snippets': file('target/snippets')
    // resources 'doc'
}

plantuml {
    sourcePath = 'doc'
}



